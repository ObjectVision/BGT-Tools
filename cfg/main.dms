container BGT_Tools
{
	// Download BGT GML files from: https://app.pdok.nl/lv/bgt/download-viewer/
	// select citygml without plaatsbepalingspunten
	// extract zip to %SourceDataDir%/BGT/$Date$
	
	parameter<string> BGT_Date := '20240124';
	parameter<uint32> srsDimensionDefaultValue := 2;
	container Units
	{
		unit<Float32> Meter := BaseUnit('m', float32);
	}
	
	container Geography: Using = "Units"
	{
		unit<fpoint> rdc_meter_base   : DialogData = "ngr_layer", SpatialReference = "EPSG:28992";
		unit<fpoint> rdc_meter        := range(rdc_meter_base, point_yx(y_min, x_min), point_yx(y_max, x_max));
		unit<ipoint> rdc_mm           := gridset(rdc_meter, point(0.001, 0.001), point(0.0,0.0), ipoint);
		
		parameter<Meter> x_min := 0[Meter];
		parameter<Meter> x_max := 280000[Meter];
		parameter<Meter> y_min := 300000[Meter];
		parameter<Meter> y_max := 625000[Meter];
		#include<ngr_layer.dms> // reference WMS layer
	}

	unit<uint8> BGT_names : nrofrows = 17
	{
		unit<uint8> Elements := range(uint8, 0b, nrAttr * #.[uint8])
		{
			attribute<string> Text:
			[ 
				 'functioneelgebied'       , '100'   , 'plus_type'                   , 'plus_type'
				,'gebouwinstallatie'       , '200'   , 'plus_typeGebouwInstallatie'  , 'plus_typeGebouwInstallatie'            //checked
				,'onbegroeidterreindeel'   , '300'   , 'bgt_fysiekVoorkomen'         , 'plus_fysiekVoorkomen'
				,'begroeidterreindeel'     , '400'   , 'class'                       , 'plus_fysiekVoorkomen'
				,'ondersteunendwaterdeel'  , '500'   , 'class'                       , 'plus_type'
				,'ondersteunendwegdeel'    , '600'   , 'function'                    , 'plus_fysiekVoorkomenOndersteunendWegdeel'
				,'ongeclassificeerdobject' , '700'   , 'plus_status'                 , 'bgt_status'  //er is niks beters
				,'overbruggingsdeel'       , '800'   , 'hoortBijTypeOverbrugging'    , 'class'       //checked
				,'overigbouwwerk'          , '900'   , 'bgt_type'                    , 'plus_type'
				,'pand'                    , '1000'  , 'plus_status'                 , 'plus_status'
				,'vegetatieobject'         , '1100'  , 'plus_type'                   , 'plus_type'            //checked
				,'tunneldeel'              , '1200'  , 'plus_status'                 , 'plus_status'            //er is niks beters
				,'waterdeel'               , '1300'  , 'class'                       , 'class'
				,'wegdeel'                 , '1400'  , 'function'                    , 'plus_fysiekVoorkomenWegdeel'
				,'waterinrichtingselement' , '1500'  , 'plus_type'                   , 'plus_type'            //checked
				,'weginrichtingselement'   , '1600'  , 'plus_type'                   , 'plus_type'            //checked
				,'kunstwerkdeel'           , '1700'  , 'bgt_type'                    , 'plus_type'   //checked
			];
		}
		attribute<string> name                  := Elements/Text[value(id(.)* nrAttr + 0b, Elements)];
		attribute<string> group_code            := Elements/Text[value(id(.)* nrAttr + 1b, Elements)];
		attribute<string> classification_field  := Elements/Text[value(id(.)* nrAttr + 2b, Elements)];
		attribute<string> plus_field            := Elements/Text[value(id(.)* nrAttr + 3b, Elements)];
		parameter<uint8>  nrAttr                := 4b;
	}
	
	container Classifications
	{
		unit<uint32> Classes := ='union_unit('+AsList(BGT_names/name+'_type',',')+')'
		{
			attribute<string> label      := ='union_data(.,'+AsList(BGT_names/name+'_type/label',',')+')';
			attribute<string> name       := AsItemName(label);
			attribute<uint32> code       := ='union_data(.,'+AsList(BGT_names/name+'_type/BrushColor',',')+')';
			attribute<uint32> BrushColor := ='union_data(.,'+AsList(BGT_names/name+'_type/BrushColor',',')+')', DialogType = "BrushColor";
			parameter<uint32> PenColor   := rgb(100,100,100), DialogType = "PenColor";
		}
		
		#include<bgt_classes.dms>
	}	
	
	container GML_schema
	{
		unit<uint32> cityObjectMember
		{
			unit<uint32> gml_Polygon
			{
				unit<uint32> gml_Exterior 
				{
					unit<uint32> gml_LinearRing 
					{
						unit<uint32> gml_posList 
						{
							attribute<string> srsDimension; // must only have the value missing, 2 or 3
						}
					}
					unit<uint32> gml_posList 
					{
						attribute<string> srsDimension; // must only have the value missing, 2 or 3
					}
				}
				unit<uint32> gml_Interior 
				{
					unit<uint32> gml_LinearRing 
					{
						unit<uint32> gml_posList 
						{
							attribute<string> srsDimension; // must only have the value missing, 2 or 3
						}
					}
					unit<uint32> gml_posList 
					{
						attribute<string> srsDimension; // must only have the value missing, 2 or 3
					}
				}
				
				// unit<uint32> gml_posList // 1-1 relationship is assumed/likely
				// {
					// attribute<string> srsDimension; // must only have the value missing, 2 or 3
				// }
				attribute<string> srsDimension; // must only have the value missing, 2 or 3
			}
		}
	}
	
    // <cityObjectMember>
        // <TunnelPart xmlns="http://www.opengis.net/citygml/tunnel/2.0" gml:id="b706f11e5-63cf-5185-c0cf-3cb80c9c0a8e">
                        // <creationDate xmlns="http://www.opengis.net/citygml/2.0">2016-10-05</creationDate>
            // <imgeo:geometrie2dTunneldeel>
				// <gml:Polygon xmlns:gml="http://www.opengis.net/gml" srsName="urn:ogc:def:crs:EPSG::28992">
					// <gml:exterior>
						// <gml:LinearRing>
							// <gml:posList srsDimension="2">
								// 15783.377 370345.898 15781.327 370349.050 15780.284 370350.652 15775.336 370358.259 15772.148 370356.026 15777.084 370348.499 15778.114 370346.928 15780.172 370343.790 15783.377 370345.898
							// </gml:posList>
						// </gml:LinearRing>
					// </gml:exterior>
				// </gml:Polygon>
			// </imgeo:geometrie2dTunneldeel>
        // </TunnelPart>
    // </cityObjectMember>
	
    // <cityObjectMember>
        // <BuildingPart xmlns="http://www.opengis.net/citygml/building/2.0" gml:id="be4aa7490-be2f-0d6b-12fc-bd072ad2b254">
                        // <creationDate xmlns="http://www.opengis.net/citygml/2.0">2018-07-19</creationDate>
            // <imgeo:geometrie2dGrondvlak>
				// <gml:MultiSurface xmlns:gml="http://www.opengis.net/gml">
					// <gml:surfaceMember>
						// <gml:Polygon>
							// <gml:exterior>
								// <gml:LinearRing>
									// <gml:posList srsDimension="2">
										// 126674.909 390474.257 126674.431 390473.845 126673.424 390472.977 126672.963 390472.580 126674.660 390470.610 126676.606 390472.287 126674.909 390474.257
									// </gml:posList>
								// </gml:LinearRing>
							// </gml:exterior>
						// </gml:Polygon>
					// </gml:surfaceMember>
				// </gml:MultiSurface>
			// </imgeo:geometrie2dGrondvlak>
        // </BuildingPart>
    // </cityObjectMember>	
	
	container Verwerk_GML 
	: using = "geography;units;Classifications"
	{
		container Tunneldeel := PrepXML_Data_T('Tunneldeel');
		container Pand       := PrepXML_Data_T('Pand');
		
		Template PrepXML_Data_T
		{
			parameter<string> FileName;
			///
			parameter<string> XmlData  
			: StorageName     = "='%SourceDataDir%/BGT/bgt-'+BGT_Date+'/bgt_'+FileName+'.gml'"
			, StorageType     = "str";

			container ParsedXML  := parse_xml(XmlData, GML_schema);
			container geoBuilder := Templates/ProcessGmlPolygon(ParsedXML/cityObjectMember, false);

			unit<uint32> Polygons := ParsedXML/cityObjectMember
			{
				attribute<rdc_mm> geometry_mm (polygon)  := geoBuilder/result;
			}
		}
	}

	container Read_GMLs :=
		for_each_ne(
			BGT_names/name
			, 'Read_GMLs_T('+quote(BGT_names/name)+','+quote(BGT_names/classification_field)+','+quote(BGT_names/plus_field)+')'
		), using = "geography;units;Classifications";
	
	Template Read_GMLs_T 
	: using = "geography;units;Classifications"
	{
		parameter<string> name;
		parameter<string> classification_field_name;
		parameter<string> plus_field_name;
		///
		parameter<string> file_name := 'bgt_'+name;
		
		parameter<string> GDAL_Configuration_Options := "GML_FACE_HOLE_NEGATIVE=YES"; 
		
		unit<uint32> GML 
		: StorageName     = "='%SourceDataDir%/BGT/bgt-'+BGT_Date+'/'+file_name+'.gml'"
		, StorageType     = "gdal.vect"
		, StorageReadOnly = "true"
		, DialogData      = "rdc_meter"
		{
			attribute<rdc_meter> geometry (poly);
			attribute<string>    classification_field := =classification_field_name;
			attribute<string>    plus_field           := =plus_field_name;
			attribute<bool>      IsActueel            := !IsDefined(eindRegistratie);
		}
		unit<uint32> ClassificationType := =name+'_type';
		unit<uint32> Actueel := select_with_org_rel(GML/IsActueel)
		{
			attribute<rdc_meter>                        geometry (poly)      := GML/geometry[org_rel];
			attribute<string>                           classification_field := GML/classification_field[org_rel];
			attribute<string>                           plus_field           := GML/plus_field[org_rel];
		}
	}
 
	unit<uint32> Write_FSS := ='union_unit('+AsList('Read_GMLs/'+BGT_names/name+'/Actueel',',')+')'
	, StorageName = "='%SourceDataDir%/BGT/'+bgt_date+'.fss'"
	, using = "geography;units;Classifications"
	{
		attribute<rdc_meter> geometry (poly) := ='union_data(.,'+AsList('Read_GMLs/'+BGT_names/name+'/Actueel/geometry',',')+')';
		attribute<string>    type_name       := ='union_data(.,'+AsList('Read_GMLs/'+BGT_names/name+'/Actueel/classification_field',',')+')';
		attribute<string>    plus_type       := ='union_data(.,'+AsList('Read_GMLs/'+BGT_names/name+'/Actueel/plus_field',',')+')';
		attribute<string>    bron_bestand    := ='union_data(.,'+AsList('const('+quote(BGT_names/name)+', Read_GMLs/'+BGT_names/name+'/Actueel)',',')+')';
	}
	
	unit<uint32> Read_FSS 
	: StorageName     = "=PropValue(Write_FSS, 'StorageName')"
	, StorageReadOnly = "true"
	, using           = "geography;units;Classifications"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<string>    type_name;
		attribute<string>    plus_type;
		attribute<string>    bron_bestand;
	}
	
	container Templates 
	: using = "units;geography"
	{
		Template union 
		{
			// begin case parameters
			unit<uint32>      child;
			unit<uint32>      parent;
			attribute<rdc_mm> geometry   (child, poly);
			attribute<parent> parent_rel (child);
			// end case parameters

			attribute<rdc_mm> result (poly, parent) := partitioned_union_polygon(geometry, parent_rel);
		}
	
		Template one2one_union
		{
			// begin case parameters
			unit<uint32>      child;
			unit<uint32>      parent;
			attribute<rdc_mm> geometry   (child, poly);
			attribute<parent> parent_rel (child);
			// end case parameters

			container impl 
			{
				parameter<bool> Check := (#child == #parent) && all(parent_rel == ID(child)[parent]);
			}
			attribute<rdc_mm> result (poly, parent) := union_data(parent, geometry), IntegrityCheck = "impl/Check";
		}
		
		Template optimized_union
		{
			// begin case parameters
			unit<uint32>      child;
			unit<uint32>      parent;
			attribute<rdc_mm> geometry   (child, poly);
			attribute<parent> parent_rel (child);
			// end case parameters

			container impl
			{
				attribute<uint32> count (parent) := pcount(parent_rel);
				unit<uint32> childCopy := range(child, 0, #child);

				unit<uint32> nonTrivialChild := select_with_org_rel((count != 1)[union_data(childCopy, parent_rel)])
				{
					attribute<child>  child_rel            := value(org_rel, child);
					attribute<rdc_mm> union (poly, parent) := partitioned_union_polygon(geometry[child_rel], parent_rel[child_rel]);
				}
			}
			attribute<rdc_mm> result (poly,parent) := impl/count <= 1 ? geometry[invert(parent_rel)] : impl/nonTrivialChild/union;
			attribute<Int32>  area   (parent)      := area(result, Int32); // DEBUG
		}
		
		Template posListProcessor 
		{
			// begin case parameters
			unit<uint32> posList;
			parameter<bool> isExterior;
			// end case parameters

			unit<uint32> impl := posList
			{
				attribute<string> values := _ValuesTable/Values[value_rel];

				attribute<uint32> srsDimension_with_nullvalues := strlen(posList/srsDimension) == 0 
					? uint32(gmlPolygon/srsDimension[posList/Parent_rel]) // als de poslist geen srsdimension heeft, nemen we die van de parent
					: uint32(posList/srsDimension);
				attribute<uint32> srsDimension := MakeDefined(srsDimension_with_nullvalues, srsDimensionDefaultValue)
				, IntegrityCheck = "srsDimension == 2 || srsDimension == 3";
				
				attribute<uint32>  count := (strcount(values, ' ') + 1) / 2;
				attribute<string>  str_sequence        := '{'+string(uint32(count) * srsDimension) + ':' + values + '}';
				attribute<float64> f64_sequence (poly) := float64Seq(str_sequence);

				unit<uint32> posListUnit := range(uint32, 0, #posList) // trick to avoid coordinates/SequenceNr having an untraceable values unit.
				{
					attribute<uint32> nrCoordPerPoint := union_data(posListUnit, srsDimension);
				}

				unit<uint32> coordinates := sequence2points(union_data(posListUnit, f64_sequence));

				unit<uint32> p := select_with_attr_by_org_rel(coordinates, coordinates/ordinal % posListUnit/nrCoordPerPoint[coordinates/SequenceNr] == 0)
				{
					attribute<float64>     x    := point;
					attribute<float64>     y    := coordinates/point[org_rel + 1];
					attribute<rdc_mm>      p_mm := point_yx(Round(y * 1000.0), Round(x * 1000.0), rdc_mm);
					attribute<posListUnit> s    := SequenceNr;
					attribute<uint32>      fo   := ordinal / posListUnit/nrCoordPerPoint[s]; // forward winding
					// attribute<uint32>      ro   := pcount(s)[s] - fo - 1; // reverse winding*/
					attribute<uint32>      pcount_s  (posListUnit) := pcount(s); // reverse winding*/
					attribute<uint32>      ro   := pcount_s[s] - fo - 1; // reverse winding*/
				}

				attribute<rdc_mm> geometry_mm (poly) := union_data(posList, points2sequence_pso(p/p_mm, p/s, isExterior ? p/ro : p/fo));
			}
			attribute<rdc_mm> result (posList, poly) := impl/geometry_mm[rdc_mm];
		}
		
		Template LinearRing
		{
			// begin case parameters
			unit<uint32>    parsedXMLsrc;
			parameter<bool> isExterior;
			// end case parameters

			container impl 
			{
				container posList := posListProcessor(parsedXMLsrc/gml_posList, isExterior);
				// container union   := one2one_union(parsedXMLsrc/gml_posList, parsedXMLsrc, posList/result, parsedXMLsrc/gml_posList/Parent_rel);
				container union   := templates/union(parsedXMLsrc/gml_posList, parsedXMLsrc, posList/result, parsedXMLsrc/gml_posList/Parent_rel);
			}
			attribute<rdc_mm> geometry_mm (poly,parsedXMLsrc) := impl/union/result;
		}

		Template Polygon
		{
			// begin case parameters
			unit<uint32>        Exterior;
			attribute<rdc_mm>   ExtGeometry (Exterior, poly);
			unit<uint32>        Interior;
			attribute<rdc_mm>   IntGeometry (Interior, poly);
			attribute<Exterior> Parent_rel  (Interior);
			// end case parameters

			container impl
			{
				container IntUnion := optimized_union(Interior, Exterior, IntGeometry, Parent_rel);
				attribute<uint32> count (Exterior) := pcount(parent_rel);

				unit<uint32> ExtCopy := range(Exterior, 0, #Exterior)
				{
					attribute<uint32> count2 := union_data(., count);
				}

				unit<uint32> nonTrivialExterior := select_with_org_rel(ExtCopy/count2 > 0)
				{
					attribute<Exterior> Exterior_rel := value(org_rel, Exterior);
					attribute<rdc_mm>   diff (poly)  := ExtGeometry[Exterior_rel] - IntUnion/result[Exterior_rel];
				}

				attribute<rdc_mm> result (poly,Exterior) := impl/nonTrivialExterior/diff[invert(impl/nonTrivialExterior/Exterior_rel)];
			}
			attribute<rdc_mm> result (poly,Exterior) :=
				impl/count == 0
					? ExtGeometry 
					: impl/result;
			attribute<Int32>  area   (Exterior)      := area(result, Int32); // DEBUG
		}

		Template ProcessGmlPolygonImpl
		{
			// begin case parameters
			unit<uint32> gmlPolygon;
			// end case parameters

			container Exterior := Templates/LinearRing(gmlPolygon/gml_exterior, true);
			container Interior := Templates/LinearRing(gmlPolygon/gml_Interior, false);
			container Polygon  := Templates/Polygon(
				gmlPolygon/gml_exterior, Exterior/geometry_mm,
				gmlPolygon/gml_Interior, Interior/geometry_mm,
				gmlPolygon/gml_Interior/Parent_rel
			);
		}

		Template ProcessGmlPolygon
		{
			// begin case parameters
			unit<uint32>    gmlContext;
			parameter<bool> hasMultiplePolygons;
			// end case parameters

			container impl := ProcessGmlPolygonImpl(gmlContext/gml_Polygon);

			parameter<string> geometry_expr := hasMultiplePolygons
				? 'Templates/optimized_union(impl/gmlPolygon, gmlContext, impl/Polygon/result, impl/gmlPolygon/Parent_rel)'
				: 'Templates/one2one_union(impl/gmlPolygon/gml_exterior, gmlContext, impl/Polygon/result, impl/gmlPolygon/gml_exterior/Parent_rel)';

			container geometry := = geometry_expr;
			attribute<rdc_mm> result (gmlContext, polygon) := geometry/result;
		}
	}
	
	
	container ConfigSettings
	{
		container Overridable
		{
			parameter<String> RSLDataDir  := '%SourceDataDir%/RSL';
		}
	}
}
